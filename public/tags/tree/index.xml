<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tree on Jiyu</title>
    <link>http://localhost:1313/tags/tree/</link>
    <description>Recent content in Tree on Jiyu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 23 May 2022 21:58:57 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/tree/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>429. N-ary Tree Level Order Traversal</title>
      <link>http://localhost:1313/leetcode/429/</link>
      <pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/429/</guid>
      <description>N-ary Tree Level Order Traversal - LeetCode&#xA;Given an n-ary tree, return the level order traversal of its nodes&amp;rsquo; values. Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).&#xA;Example 1:&#xA;Input: root = [1,null,3,2,4,null,5,6] Output: [[1],[3,2,4],[5,6]]&#xA;Example 2:&#xA;Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]&#xA;Constraints:&#xA;The height of the n-ary tree is less than or equal to 1000 The total number of nodes is between [0, 104]</description>
    </item>
    <item>
      <title>310. Minimum Height Trees</title>
      <link>http://localhost:1313/leetcode/310/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/310/</guid>
      <description>Minimum Height Trees - LeetCode A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree. Given a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root.</description>
    </item>
    <item>
      <title>559. Maximum Depth of N-ary Tree</title>
      <link>http://localhost:1313/leetcode/559/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/559/</guid>
      <description>Maximum Depth of N-ary Tree - LeetCode Given a n-ary tree, find its maximum depth. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).&#xA;Example 1:&#xA;Input: root = [1,null,3,2,4,null,5,6] Output: 3 Example 2:&#xA;Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] Output: 5</description>
    </item>
    <item>
      <title>106. construct binary tree from inorder and post order traversal</title>
      <link>http://localhost:1313/leetcode/106/</link>
      <pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/106/</guid>
      <description>Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.&#xA;Example 1:&#xA;Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3] Output: [3,9,20,null,null,15,7]&#xA;code class Solution: def buildTree(self, inorder, postorder): if not inorder or not postorder: return None root = TreeNode(postorder[-1]) inorderIndex = inorder.index(postorder.pop()) root.right = self.buildTree(inorder[inorderIndex+1:], postorder) root.left = self.</description>
    </item>
    <item>
      <title>112. path sum</title>
      <link>http://localhost:1313/leetcode/112/</link>
      <pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/112/</guid>
      <description>Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum. A leaf is a node with no children.&#xA;code class Solution: def hasPathSum(self, root, sum): if not root: return False if not root.left and not root.right and root.val == sum: return True sum -= root.val return self.hasPathSum(root.left, sum) or self.</description>
    </item>
    <item>
      <title>117. Populating Next Right Pointers in Each Node II</title>
      <link>http://localhost:1313/leetcode/117/</link>
      <pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/117/</guid>
      <description>https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/&#xA;Given a binary tree struct Node { int val; Node *left; Node *right; Node *next; } Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL. Initially, all next pointers are set to NULL.&#xA;code class Solution: def connect(self, root: &amp;#39;Node&amp;#39;) -&amp;gt; &amp;#39;Node&amp;#39;: if not root: return None thislevel = [root] while thislevel: for i in range(len(thislevel)): if i == len(thislevel)-1: thislevel[i].</description>
    </item>
    <item>
      <title>144. Binary tree preorder traversal</title>
      <link>http://localhost:1313/leetcode/144/</link>
      <pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/144/</guid>
      <description>Given the root of a binary tree, return the preorder traversal of its nodes&amp;rsquo; values.&#xA;code class Solution: def preorderTraversal(self, root: TreeNode) -&amp;gt; List[int]: self.res = [] def pre(root): if root: self.res.append(root.val) pre(root.left) pre(root.right) pre(root) return self.res code class Solution: def preorderTraversal(self, root): ret = [] stack = [root] while stack: node = stack.pop() if node: ret.append(node.val) stack.append(node.right) stack.append(node.left) return ret </description>
    </item>
    <item>
      <title>145. Binary tree postorder traversal</title>
      <link>http://localhost:1313/leetcode/145/</link>
      <pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/145/</guid>
      <description>Given the root of a binary tree, return the postorder traversal of its nodes&amp;rsquo; values. c&#xA;code class Solution: def postorderTraversal(self, root: TreeNode) -&amp;gt; List[int]: self.res = [] def post(root): if root: post(root.left) post(root.right) self.res.append(root.val) post(root) return self.res code modified pre-order class Solution: def postorderTraversal(self, root): traversal, stack = [], [root] while stack: node = stack.pop() if node: # pre-order, right first traversal.append(node.val) stack.append(node.left) stack.append(node.right) # reverse result return traversal[::-1] </description>
    </item>
    <item>
      <title>230. Kth smallest element in a BST</title>
      <link>http://localhost:1313/leetcode/230-kth-smallest-element-in-a-bst/</link>
      <pubDate>Sat, 13 Mar 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/230-kth-smallest-element-in-a-bst/</guid>
      <description>Given a binary search tree, write a function kthSmallest to find the kth smallest element in it. Note: You may assume k is always valid, 1 ≤ k ≤ BST&amp;rsquo;s total elements. Example 1: Input: root = [3,1,4,null,2], k = 1&#xA;3&#xA;/ \&#xA;1 4&#xA;\&#xA;2&#xA;Output: 1&#xA;code Iterative class Solution: def kthSmallest(self, root, k): stack = [] while root or stack: while root: stack.append(root) root = root.</description>
    </item>
    <item>
      <title>103. Binary tree zigzag level order traversal</title>
      <link>http://localhost:1313/leetcode/103-binary-tree-zigzag-level-order-traversal/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/103-binary-tree-zigzag-level-order-traversal/</guid>
      <description>Given a binary tree, return the zigzag level order traversal of its nodes&amp;rsquo; values. (ie, from left to right, then right to left for the next level and alternate between). For example: Given binary tree [3,9,20,null,null,15,7],&#xA;3 / 9 20 / 15 7&#xA;return its zigzag level order traversal as:&#xA;[ [3], [20,9], [15,7] ]&#xA;code def zigzagLevelOrder(self, root): queue = collections.deque([root]) res = [] while queue: r = [] for _ in range(len(queue)): q = queue.</description>
    </item>
    <item>
      <title>94. Binary tree inorder traversal</title>
      <link>http://localhost:1313/leetcode/94-binary-tree-inorder-traversal/</link>
      <pubDate>Thu, 11 Mar 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/94-binary-tree-inorder-traversal/</guid>
      <description>Given a binary tree, return the inorder traversal of its nodes&amp;rsquo; values.&#xA;code class Solution: def inorderTraversal(self, root: TreeNode) -&amp;gt; List[int]: res = [] def inorder(node): if not node: return inorder(node.left) res.append(node.val) inorder(node.right) inorder(root) return res c iterative class Solution: def inorderTraversal(self, root: TreeNode) -&amp;gt; List[int]: res, stack = [], [] while True: while root: stack.append(root) root = root.left if not stack: return res node = stack.pop() res.append(node.val) root = node.</description>
    </item>
    <item>
      <title>101. Symmetric tree</title>
      <link>http://localhost:1313/leetcode/101-symmetric-tree/</link>
      <pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/101-symmetric-tree/</guid>
      <description>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center). For example, this binary tree [1,2,2,3,4,4,3] is symmetric: 1 / 2 2 / \ / 3 4 4 3&#xA;But the following [1,2,2,null,3,null,3] is not: 1 / 2 2 \ 3 3&#xA;code better class Solution: def isSymmetric(self, root): def isSym(L,R): if not L and not R: return True if L and R and L.</description>
    </item>
  </channel>
</rss>
