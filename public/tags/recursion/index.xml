<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recursion on Jiyu</title>
    <link>http://localhost:1313/tags/recursion/</link>
    <description>Recent content in Recursion on Jiyu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 29 Dec 2021 17:11:05 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/recursion/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>912. sort an array</title>
      <link>http://localhost:1313/leetcode/912/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/912/</guid>
      <description>Given an array of integers nums, sort the array in ascending order. quick sort py&#xA;code class Solution: def sortArray(self, nums: List[int]) -&amp;gt; List[int]: self.quickSort(nums, 0, len(nums)-1) return nums def quickSort(self, arr, left, right): mid = (left + right) // 2 arr[mid], arr[right] = arr[right], arr[mid] # pick the mid as pivot every time if left &amp;lt; right: pivot = self.partition(arr, left, right) self.quickSort(arr, left, pivot-1) self.quickSort(arr, pivot+1, right) def partition(self, arr, left, right): i = left pivot = arr[right] for n in range(left, right): if arr[n] &amp;lt; pivot: arr[i], arr[n] = arr[n], arr[i] i += 1 arr[right], arr[i] = arr[i], arr[right] return i code class Solution(object): def sortArray(self, nums): self.</description>
    </item>
    <item>
      <title>95. Unique binary search tree II</title>
      <link>http://localhost:1313/leetcode/95/</link>
      <pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/95/</guid>
      <description>Given an integer n, return all the structurally unique **BST&amp;rsquo;**s (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.&#xA;Example 1:&#xA;Input: n = 3 Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]&#xA;95*. Unique Binary Search Trees II Â· leetcode&#xA;code class Solution: def generateTrees(self, n): def generate(first, last): trees = [] for root in range(first, last+1): for left in generate(first, root-1): for right in generate(root+1, last): node = TreeNode(root) node.</description>
    </item>
    <item>
      <title>779. K-th Symbol in Grammar</title>
      <link>http://localhost:1313/leetcode/779/</link>
      <pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/779/</guid>
      <description>We build a table of n rows (1-indexed). We start by writing 0 in the 1st row. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10.&#xA;For example, for n = 3, the 1st row is 0, the 2nd row is 01, and the 3rd row is 0110.Given two integer n and k, return the kth (1-indexed) symbol in the nth row of a table of n rows.</description>
    </item>
    <item>
      <title>119. Pascal triangle II</title>
      <link>http://localhost:1313/leetcode/119/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/119/</guid>
      <description>Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal&amp;rsquo;s triangle. In Pascal&amp;rsquo;s triangle, each number is the sum of the two numbers directly above it as shown: Example 1: Input: rowIndex = 3 Output: [1,3,3,1] Example 2: Input: rowIndex = 0 Output: [1]&#xA;code class Solution: def getRow(self, rowIndex: int) -&amp;gt; List[int]: if rowIndex == 0: return [1] elif rowIndex == 1: return [1,1] def next(row): cur = [1] for i in range(len(row)-1): cur.</description>
    </item>
    <item>
      <title>509. Fibonacci number</title>
      <link>http://localhost:1313/leetcode/509/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/509/</guid>
      <description>he Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is, F(0) = 0, F(1) = 1 F(n) = F(n - 1) + F(n - 2), for n &amp;gt; 1. Given n, calculate F(n).&#xA;Example 1: Input: n = 2 Output: 1 Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.</description>
    </item>
    <item>
      <title>700. Search in a binary search tree</title>
      <link>http://localhost:1313/leetcode/700/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/700/</guid>
      <description>You are given the root of a binary search tree (BST) and an integer val. Find the node in the BST that the node&amp;rsquo;s value equals val and return the subtree rooted with that node. If such a node does not exist, return null.&#xA;Example 1:&#xA;Input: root = [4,2,7,1,3], val = 2 Output: [2,1,3]&#xA;code class Solution: def searchBST(self, root: TreeNode, val: int) -&amp;gt; TreeNode: def rec(root): if root: if root.</description>
    </item>
  </channel>
</rss>
